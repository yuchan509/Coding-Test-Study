{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a1c97f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import konlpy, re, tqdm, os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from konlpy.tag import Okt\n",
    "\n",
    "import tensorflow as tf\n",
    "from keras.models import Sequential, load_model\n",
    "from keras.layers import Embedding, GlobalAveragePooling1D, Dense\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.callbacks import EarlyStopping, ModelCheckpoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b84317ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load train & test dataset.\n",
    "train = pd.read_csv('open/open/train.csv')\n",
    "test  = pd.read_csv('open/open/test.csv')\n",
    "# display(train)\n",
    "# display(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f396cddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index           0\n",
       "제출년도            0\n",
       "사업명             0\n",
       "사업_부처명          0\n",
       "계속과제여부          0\n",
       "내역사업명           0\n",
       "과제명             0\n",
       "요약문_연구목표     3002\n",
       "요약문_연구내용     3001\n",
       "요약문_기대효과     3051\n",
       "요약문_한글키워드    3028\n",
       "요약문_영문키워드    3087\n",
       "label           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치 확인.\n",
    "# baseline ==> 과정명 변수만을 이용하여 학습하므로, 다른 변수의 결측은 제거나 대치하지 않고 진행.\n",
    "train.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c3a2246d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (174304,)\n",
      "y_train shape: (174304,)\n",
      "x_test shape:  (43576,)\n"
     ]
    }
   ],
   "source": [
    "# baseline ==> Feature : 과제명 하나만을 이용토록 한다.\n",
    "x_train = train['과제명']\n",
    "y_train = train['label']\n",
    "x_test  = test['과제명']\n",
    "\n",
    "# Shape of dataset.\n",
    "print(f'x_train shape: { x_train.shape }')\n",
    "print(f'y_train shape: { y_train.shape }')\n",
    "print(f'x_test shape:  { x_test.shape }' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8da87332",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████████████████████████████████████| 174304/174304 [03:12<00:00, 903.23it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████████| 43576/43576 [00:52<00:00, 827.85it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data : 174304\n",
      "Test data  : 43576\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# text 정제 함수 생성 : 한글 이외의 문자는 전부 제거함.\n",
    "def Preprocessing(text, tagger, remove_stopwords=False, stop_words=[]) :\n",
    "    # 한글 정규식 정의(띄어쓰기, ㄱ ~ ㅣ, 가 ~ 힣)\n",
    "    text = re.sub('[^ ㄱ-ㅣ가-힣]+','',text)\n",
    "    \n",
    "    # 텍스트를 형태소로 분리후 각 단어로부터 어간을 추출.(stem=True)\n",
    "    word_text = tagger.morphs(text, stem=True)\n",
    "    \n",
    "    # 불용어 처리.\n",
    "    if remove_stopwords :\n",
    "        word_text = [ t for t in word_text if not t in stop_words ]\n",
    "        \n",
    "    return word_text\n",
    "\n",
    "# 한글 불용어 사전 파일 이용.\n",
    "with open('korean_stopwords.txt', encoding='utf-8') as fp :\n",
    "    stop_words = fp.readlines()\n",
    "    \n",
    "# \\n 제거.\n",
    "stop_words = [ x.strip() for x in stop_words ]\n",
    "# print(stop_words)\n",
    "# print('-'*135)\n",
    "# print()\n",
    "\n",
    "# Okt 이용.\n",
    "tagger = Okt()\n",
    "\n",
    "# train, test 데이터를 정제한 텍스트를 담을 리스트 생성.\n",
    "Clean_train_data = []\n",
    "Clean_test_data  = []\n",
    "\n",
    "# Train dataset 정제 작업 시작.\n",
    "for text in tqdm.tqdm(x_train) :\n",
    "    try :\n",
    "        Clean_train_data.append(Preprocessing(text, tagger, remove_stopwords=True, stop_words=stop_words))\n",
    "    except :\n",
    "        Clean_train_data.append([])\n",
    "\n",
    "# est dataset 정제 작업 시작.\n",
    "for text in tqdm.tqdm(x_test) :\n",
    "    if type(text) == str :\n",
    "        Clean_test_data.append(Preprocessing(text, tagger, remove_stopwords=True, stop_words=stop_words))\n",
    "    else :\n",
    "        Clean_test_data.append([])   \n",
    "        \n",
    "# 정제된 데이터의 수.\n",
    "print(f'Train data : {len(Clean_train_data)}')\n",
    "print(f'Test data  : {len(Clean_test_data)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee8ec047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "최대 단어의 개수 : 46\n"
     ]
    }
   ],
   "source": [
    "# 우선 특별한 옵션을 지정하지 않고 진행.\n",
    "token = Tokenizer()\n",
    "\n",
    "# fit_on_texts() : 입력으로 들어온 텍스트에서 단어의 빈도수가 높은 순으로 낮은 숫자부터 인덱스 부여, 단어 집합 생성.\n",
    "token.fit_on_texts(Clean_train_data)\n",
    "\n",
    "# 단어 사전을 통해 문장의 각 단어를 숫자(시퀀스 형태)로 변환. : 인덱스로만 채워진 새로운 배열을 생성한다는 의미.\n",
    "Train_squences = token.texts_to_sequences(Clean_train_data)\n",
    "Test_squences  = token.texts_to_sequences(Clean_test_data)\n",
    "\n",
    "# 한 문장의 최대 단어 수를 가져옴.\n",
    "max_cnt = 0\n",
    "for c in Train_squences :\n",
    "    # 현재 문장의 글자수.\n",
    "    cnt = len(c)\n",
    "    # 현재 문장의 글자수가 이전 최대 수치보다 많으면 덮어쓰기.\n",
    "    if max_cnt < cnt :\n",
    "        max_cnt = cnt\n",
    "print(f'최대 단어의 개수 : {max_cnt}')\n",
    "\n",
    "# Padding 처리 : 서로 길이가 다른 리스트의 개수를 max_cnt로 맞춰줌.\n",
    "# 끝 부분으로 적용. ==> 즉 max_cnt 길이의 리스트로 동일하게 맞춰주기 위해 부족한 부분으로 뒤에서 부터 0으로 채우는 작업을 의미.\n",
    "padded_train = pad_sequences(Train_squences, max_cnt, padding='post')\n",
    "padded_test  = pad_sequences(Test_squences, max_cnt, padding='post')\n",
    "\n",
    "# One-hot-encoding.\n",
    "# 주의 : 맨 앞에 0이 추가됨.\n",
    "voca_size = len(token.word_index) + 1\n",
    "# train_x = to_categorical(Train_squences, num_classes = voca_size)\n",
    "# test_x  = to_categorical(Test_squences, num_classes = voca_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a2d1c7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 00001: val_loss improved from inf to 0.82633, saving model to models\\1-0.8263311982154846.hdf5\n",
      "\n",
      "Epoch 00002: val_loss improved from 0.82633 to 0.65824, saving model to models\\2-0.658235490322113.hdf5\n",
      "\n",
      "Epoch 00003: val_loss improved from 0.65824 to 0.58195, saving model to models\\3-0.5819496512413025.hdf5\n",
      "\n",
      "Epoch 00004: val_loss improved from 0.58195 to 0.52111, saving model to models\\4-0.5211097002029419.hdf5\n",
      "\n",
      "Epoch 00005: val_loss improved from 0.52111 to 0.49372, saving model to models\\5-0.4937210977077484.hdf5\n",
      "\n",
      "Epoch 00006: val_loss improved from 0.49372 to 0.47540, saving model to models\\6-0.4754039943218231.hdf5\n",
      "\n",
      "Epoch 00007: val_loss improved from 0.47540 to 0.46287, saving model to models\\7-0.4628666043281555.hdf5\n",
      "\n",
      "Epoch 00008: val_loss did not improve from 0.46287\n",
      "\n",
      "Epoch 00009: val_loss improved from 0.46287 to 0.46113, saving model to models\\9-0.4611284136772156.hdf5\n",
      "\n",
      "Epoch 00010: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00011: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00012: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00013: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00014: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00015: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00016: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00017: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00018: val_loss did not improve from 0.46113\n",
      "\n",
      "Epoch 00019: val_loss did not improve from 0.46113\n"
     ]
    }
   ],
   "source": [
    "# Modeling.\n",
    "\n",
    "# 학습 모델을 구성.\n",
    "model = Sequential()\n",
    "\n",
    "# word embedding : 데이터 공간의 효율성을 위해 주어진 배열을 정해진 길이로 압축하는 작업.\n",
    "# keras의 Embedding 함수는 오차역전파 방식으로 각 단어 간의 최적의 유사도를 계산.\n",
    "model.add(Embedding(voca_size, 32, input_length = max_cnt))\n",
    "\n",
    "# 임시 데이터에 대한 글로벌 평균 풀링 작업.?\n",
    "model.add(GlobalAveragePooling1D())\n",
    "model.add(Dense(128, activation = 'relu'))\n",
    "model.add(Dense(46, activation = 'softmax'))\n",
    "# model.summary()\n",
    "\n",
    "# 컴파일.\n",
    "model.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n",
    "\n",
    "# 모델 저장 폴더 설정.\n",
    "model_dir = './models/'\n",
    "if not os.path.isdir(model_dir) :                                                           \n",
    "    os.mkdir(model_dir)\n",
    "    \n",
    "# Callback 조건 설정.\n",
    "model_path = 'models/{epoch}-{val_loss}.hdf5'\n",
    "callback1 = ModelCheckpoint(filepath = model_path, monitor = 'val_loss', verbose = 1, save_best_only = True)\n",
    "callback2 = EarlyStopping(monitor = 'val_loss', patience=10)\n",
    "\n",
    "# 모델 학습.\n",
    "history = model.fit(padded_train, y_train, validation_split = 0.2, epochs = 30, verbose = 0, callbacks = [callback1, callback2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "71726edc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5447/5447 [==============================] - 2s 422us/step - loss: 0.2790 - accuracy: 0.9223\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9222851991653442"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 성능 최적의 모델 로딩.\n",
    "best_model = load_model('models/9-0.4611284136772156.hdf5')\n",
    "best_model.evaluate(padded_train, y_train)[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cd96ac58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Train loss\n",
    "y_loss = history.history['loss']\n",
    "# validation loss\n",
    "y_vloss = history.history['val_loss']\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "x_len = np.arange(len(y_loss))\n",
    "plt.plot(x_len, y_loss,  label='Train Loss', c='coral', alpha=.8)\n",
    "plt.plot(x_len, y_vloss,  label='Validation Loss', c='cornflowerblue', alpha=.8)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "69340dae",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = best_model.predict(padded_test)\n",
    "pred = tf.argmax(pred, axis = 1)\n",
    "\n",
    "df = pd.read_csv('open/open/sample_submission.csv')\n",
    "df['label'] = pred\n",
    "df.to_csv('open/open/Baseline_test1.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fd220921",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>174304</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>174305</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>174306</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>174307</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>174308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43571</th>\n",
       "      <td>217875</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43572</th>\n",
       "      <td>217876</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43573</th>\n",
       "      <td>217877</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43574</th>\n",
       "      <td>217878</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43575</th>\n",
       "      <td>217879</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>43576 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        index  label\n",
       "0      174304      0\n",
       "1      174305      0\n",
       "2      174306      0\n",
       "3      174307      0\n",
       "4      174308      0\n",
       "...       ...    ...\n",
       "43571  217875     19\n",
       "43572  217876      0\n",
       "43573  217877      2\n",
       "43574  217878      0\n",
       "43575  217879      0\n",
       "\n",
       "[43576 rows x 2 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('open/open/Baseline_test1.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
